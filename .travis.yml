sudo: required
dist: xenial
language: java
env:
  global:
    - zipkinHost=localhost
    - zipkinPort=9411
    - jwtid=myMpJwt
    - IMAGE_NAME=orders-mp
    - TAG=travis
    - RELEASE_NAME=orders
jdk:
  - openjdk8
stages:
  - docker build and test
  - kubernetes build, deploy, and test
jobs:
  include:
    - stage: docker build and test
      services:
      - mysql
      env:
        - jdbcURL=jdbc:mysql://localhost:9039/ordersdb?useSSL=false
        - dbuser=root
        - dbpassword=password
        - auth_health=https://localhost:9443/health
        - inventory_url=http://localhost:9081/inventory/rest/inventory/stock
        - inventory_health=http://localhost:9081/health
        - rabbit=localhost
        - jwksUri=https://localhost:9443/oidc/endpoint/OP/jwk
        - jwksIssuer=https://localhost:9443/oidc/endpoint/OP
        - administratorRealm=https://localhost:9443/oidc/endpoint/OP
        - zipkinHost=localhost
        - zipkinPort=9411
      before_script:
      - export GATEWAY=$(docker network inspect bridge | grep "Gateway" | awk '/"/{print $2}' | sed -e 's/^"//' -e 's/"$//')
      # Start RabbitMQ
      - docker pull rabbitmq
      - docker run -p 5672:5672 -d rabbitmq
      # Generate the Keystore
      - bash scripts/keygen.sh
      - sudo cp -r keystorevol /etc/
      # Run Auth, put keystore in, and start it
      - docker pull ibmcase/auth-mp:v3.0.0
      - docker create --name auth -p 9443:9443 -p 9080:9080 ibmcase/auth-mp:v3.0.0
      - docker cp keystorevol auth:/etc/
      - docker start auth
      # Pull and run inventorydb
      - docker pull ibmcase/bc-inventorydb:v2.0.0
      - docker run -p 9041:3306 -d --name inventorydb -e MYSQL_ROOT_PASSWORD=password ibmcase/bc-inventorydb:v2.0.0
      # Run Inventory and start it w/ vars
      - docker pull ibmcase/inventory-mp:v2.0.0
      - docker create --name inventory -p 9444:9443 -p 9081:9080 -e zipkinHost=localhost -e zipkinPort=9411 -e jdbcURL=jdbc:mysql://${GATEWAY}:9041/inventorydb?useSSL=false -e dbuser=root -e dbpassword=password -e rabbit=${GATEWAY} ibmcase/inventory-mp:v2.0.0
      - docker start inventory
      # Build and run ordersdb
      - cd mysql
      - docker build -t ordersdb .
      - docker run -p 9039:3306 -d --name ordersdb -e MYSQL_ROOT_PASSWORD=password ordersdb
      - cd -
      script:
      # Maven Build
      - mvn clean install
      # Start Application
      - mvn liberty:start-server -DtestServerHttpPort=9083 -DtestServerHttpsPort=9446
      # Wait for the Orders container to start accepting connections
      - sleep 25
      # Run Orders API Test
      - bash scripts/api_tests.sh
      
    - stage: kubernetes build, deploy, and test
      services:
      - docker
      env:
      - CHANGE_MINIKUBE_NONE_USER=true
      install:
      # Install minikube and helm
      - curl -O https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-kubernetes/microprofile/utility_scripts/install_minikube_and_helm.sh
      - chmod +x install_minikube_and_helm.sh
      - bash install_minikube_and_helm.sh
      before_script:
      # Define a local Keystore
      - bash scripts/keygen.sh
      - sudo cp -r keystorevol /etc/
      # Add helm repos for bluecompute services
      - helm repo add services-bc-mp https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-kubernetes/microprofile/docs/charts/services-bc-mp
      - helm repo add bc-inventory https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-micro-inventory/microprofile/chart/release
      # Run Kubernetes Job and run Auth
      - helm install --name keystore services-bc-mp/keystore
      - helm install --name auth services-bc-mp/auth
      - MINIKUBE_IP=$(minikube ip)
      # Get Helm dependencies
      - helm dependency update chart/orders
      # Run inventory
      - helm install --set travis.external=true,travis.releaseName=${RELEASE_NAME} --name inventory bc-inventory/inventory
      script:
      # Maven Build
      - mvn clean install
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Install Orders
      - AUTH_NODE_PORT=$(kubectl get service auth-auth -o=jsonpath='{.spec.ports[1].nodePort}')
      - helm install --set travis=true --set service.minikubeIp=$MINIKUBE_IP,image.repository=${IMAGE_NAME},image.tag=${TAG} --name ${RELEASE_NAME} ./chart/orders/
      # Wait for Orders to be ready
      - kubectl get deployments ${RELEASE_NAME}-orders -o yaml
      - READY=$(kubectl get deployments ${RELEASE_NAME}-orders -o yaml | grep "readyReplicas" | awk '{print $2}')
      - echo $READY
      - until [ -n "$READY" ] && [ ${READY} -ge 1 ]; do READY=$(kubectl get deployments ${RELEASE_NAME}-orders -o yaml | grep "readyReplicas" | awk '{print $2}'); kubectl get deployments -o wide; echo "Waiting for orders to be ready"; sleep 10; done
      # Wait for orders deployment to start accepting connections
      - COMPLETION=$( kubectl get jobs -o json | jq '.items | .[] | select(.metadata.name=="orders-orders-job") | .status.succeeded' )
      - echo $COMPLETION
      - until [ -n "$COMPLETION" ] && [ $COMPLETION -ge 1 ]; do COMPLETION=$( kubectl get jobs -o json | jq '.items | .[] | select(.metadata.name=="orders-orders-job") | .status.succeeded' ); kubectl get pods -o wide; echo "Waiting for orders populate job to be completed"; sleep 10; done
      # Run auth API Test
      - ORDERS_NODE_PORT=$(kubectl get service orders-orders -o=jsonpath='{.spec.ports[1].nodePort}')
      - INV_NODE_PORT=$(kubectl get service inventory-inventory -o=jsonpath='{.spec.ports[0].nodePort}')
      - kubectl get services
      - bash scripts/api_tests.sh $MINIKUBE_IP $ORDERS_NODE_PORT $MINIKUBE_IP $AUTH_NODE_PORT $MINIKUBE_IP $INV_NODE_PORT